import hashlib
import time
import rsa
import psutil
from phe import paillier

# Step 1: Calculate SHA-256 hash
mystring = input("Your string is: ")
myhash = hashlib.sha256(mystring.encode()).hexdigest()
print("Hash value calculated:", myhash)

# Step 2: Generate Paillier key pair
start_gen_paillier = time.time()
public_key_paillier, private_key_paillier = paillier.generate_paillier_keypair()
end_gen_paillier = time.time()
print("Paillier keys generated")

# Step 3: RSA OAEP Encryption
start_enc_rsa = time.time()
public_key_rsa, private_key_rsa = rsa.newkeys(2048)
encrypted_hash_rsa = rsa.encrypt(myhash.encode(), public_key_rsa)
end_enc_rsa = time.time()
print("Hash encrypted RSA")

# Step 4: Paillier Encryption
start_enc_paillier = time.time()
ciphertext_paillier = public_key_paillier.encrypt(int(myhash, 16), precision=7)
end_enc_paillier = time.time()
print("Hash encrypted Paillier")

# Step 5: Paillier Decryption
start_dec_paillier = time.time()
decrypted_hash_paillier = private_key_paillier.decrypt(ciphertext_paillier)
end_dec_paillier = time.time()
print("Hash decrypted Paillier")

# Step 6: RSA OAEP Decryption
start_dec_rsa = time.time()
decrypted_hash_rsa = rsa.decrypt(encrypted_hash_rsa, private_key_rsa).decode()
end_dec_rsa = time.time()
print("Hash decrypted RSA")

# Step 7: Compare hash values
print("Paillier key generation time:", end_gen_paillier - start_gen_paillier)
print("RSA-OAEP encryption time:", end_enc_rsa - start_enc_rsa)
print("Paillier encryption time:", end_enc_paillier - start_enc_paillier)
print("Paillier decryption time:", end_dec_paillier - start_dec_paillier)
print("RSA-OAEP decryption time:", end_dec_rsa - start_dec_rsa)
process = psutil.Process()
memory_usage = process.memory_info().rss / 1024 #inkilobytes
print("Memory consumption:", memory_usage,"KB")

# Check if all hash values are the same
if myhash == decrypted_hash_rsa:
    print("Hash values are the same.")
else:
    print("Hash values differ.")
